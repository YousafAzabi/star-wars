{"version":3,"sources":["components/TypeSelect.js","config.js","components/Player.js","components/CommonWinningAttribute.js","func/index.js","App.js","serviceWorker.js","index.js"],"names":["TypeSelect","_this$props","this","props","classes","handleChange","react_default","a","createElement","FormControl","className","formControl","InputLabel","htmlFor","Select","value","type","onChange","MenuItem","React","Component","withStyles","theme","float","width","minWidth","marginLeft","marginRight","config","ATTRIBUTES","people","starships","Player","isDisplayed","title","details","winningAttribute","attributes","class","card","style","textAlign","List","map","attribute","ListItem","key","margin","border","borderRadius","badge","right","func","fetchData","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","collection","wrap","_context","prev","next","fetch","concat","then","res","status","results","json","sent","abrupt","stop","_x","apply","arguments","getData","obj","length","undefined","Math","floor","random","getWinner","pOne","pTwo","winner","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleTypeSelectChange","event","setState","target","playerOne","playerTwo","isNewdisabled","handleCommonAttributeSelectChange","handleNewClick","state","collections","isPlayerTwoDisabled","isPlayDisabled","handlePlayClick","playerOneWins","playerTwoWins","alert","marginTop","components_TypeSelect","CommonWinningAttribute","components_Player","Typography","buttonContainer","Button","disabled","button","onClick","height","color","background","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.51d04bba.chunk.js","sourcesContent":["import React from 'react';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n  formControl: {\n    float: 'left',\n    width: '34%',\n    minWidth: 200,\n    marginLeft: '8%',\n    marginRight: '8%'\n  },\n});\n\nclass TypeSelect extends React.Component {\n\n  render() {\n    const { classes, handleChange } = this.props;\n    return (\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"demo-controlled-open-select\">Collection</InputLabel>\n        <Select value={this.props.type}\n        onChange={handleChange}>\n          <MenuItem value={'people'}>People</MenuItem>\n          <MenuItem value={'starships'}>StarShips</MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n}\n\nexport default withStyles(styles)(TypeSelect);\n","\n//const keys = details && details['mass'] ?\nconst ATTRIBUTES = {\n  people: [\n    'height',\n    'mass'\n  ],\n  starships:[\n    'cost_in_credits',\n    'length',\n    'max_atmosphering_speed',\n    'crew',\n    'passengers',\n    'hyperdrive_rating'\n  ]\n};\n\nexport default {\n  ATTRIBUTES\n};\n","import React from 'react';\n\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Typography from '@material-ui/core/Typography';\nimport Badge from '@material-ui/core/Badge';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport $ from 'jquery';\nimport Bootstrap from 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport config from '../config';\n\nconst styles = theme => ({\n  card: {\n    margin: '5%',\n    float: 'left',\n    width: '40%',\n    textAlign: 'left',\n    border: 'groove 1px',\n    borderRadius: 10\n  },\n  badge: {\n    float: 'right',\n    right: '80px'\n  },\n});\n\nclass Player extends React.Component {\n\n  render() {\n    const { classes, isDisplayed, title, type, details, winningAttribute } = this.props;\n    const attributes = config.ATTRIBUTES[type];\n\n    return (\n      <div class=\"card\" className={classes.card}>\n        <div class=\"card-body\">\n          <h5 class=\"card-title\" style={{textAlign: 'center'}}>\n            {title}\n            <span class=\"badge badge-secondary\">{winningAttribute}</span>\n          </h5>\n          {details !== null &&\n            <List className={classes.details}>\n            { attributes.map(attribute =>\n              <ListItem key={attribute}>\n                <b>{attribute}</b>: {isDisplayed && details[attribute]}\n              </ListItem>\n            )}\n            </List>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(Player);\n","import React from 'react';\n\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport config from '../config';\n\nconst styles = theme => ({\n  formControl: {\n    float: 'left',\n    width: '34%',\n    minWidth: 200,\n    marginLeft: '8%',\n    marginRight: '8%'\n  },\n});\n\nclass TypeSelect extends React.Component {\n\n  render() {\n    const { classes, type, winningAttribute, handleChange } = this.props;\n    const attributes = config.ATTRIBUTES[type];\n\n    return (\n      <FormControl className={classes.formControl}>\n        <InputLabel htmlFor=\"demo-controlled-open-select\">Winning Attribute</InputLabel>\n        <Select value={winningAttribute}\n        onChange={handleChange}>\n          { attributes && attributes.map(attribute =>\n            <MenuItem key={attribute} value={attribute}>{attribute}</MenuItem>\n          )}\n        </Select>\n      </FormControl>\n    );\n  }\n}\n\nexport default withStyles(styles)(TypeSelect);\n","const fetchData = async (type) => {\n  const collection = await fetch(`https://swapi.co/api/${type}/`)\n    .then(res => {\n      if(res.status !== 200) {\n        return {results: null};\n      }\n      return res.json();\n    });\n  return collection.results;\n}\n\nconst getData = (obj = []) => {\n  if(obj.length > 0) {\n    const id = Math.floor(Math.random() * obj.length);\n    return obj[id];\n  }\n  return null;\n}\n\nconst getWinner = (pOne = {}, pTwo = {}, attribute) => {\n  let winner = 'draw';\n  if(pOne[attribute] > pTwo[attribute]) {\n    winner = 'Player One Wins';\n  } else if(pOne[attribute] < pTwo[attribute]) {\n    winner = 'Player Two Wins';\n  }\n  return winner;\n}\n\nexport default {\n  fetchData,\n  getData,\n  getWinner,\n};\n","import React from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/core/styles'\n\nimport TypeSelect from './components/TypeSelect';\nimport Player from './components/Player';\nimport CommonWinningAttribute from './components/CommonWinningAttribute';\nimport func from './func/index';\n\nconst styles = theme => ({\n  button: {\n    width: 80,\n    height: 80,\n    borderRadius: 100,\n    margin: '80px 30px',\n    color: 'white',\n    background: 'orange'\n  },\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: '',\n      collections: null,\n      winningAttribute: '',\n      playerOne: null,\n      playerTwo: null,\n      playerOneWins: 0,\n      playerTwoWins: 0,\n      isPlayerTwoDisabled: false,\n      isNewdisabled: false,\n      isPlayDisabled: true,\n    };\n  }\n\n  handleTypeSelectChange = (event) => {\n    this.setState({\n      type: event.target.value,\n      playerOne: null,\n      playerTwo: null,\n      winningAttribute: '',\n      isNewdisabled: false,\n    });\n  }\n\n  handleCommonAttributeSelectChange = (event) => {\n    this.setState({ winningAttribute: event.target.value });\n  }\n\n  handleNewClick = () => {\n    const collection = this.state.collections[this.state.type];\n    const playerOne = func.getData(collection);\n    const playerTwo = func.getData(collection);\n    this.setState({\n      playerOne,\n      playerTwo,\n      isPlayerTwoDisabled: false,\n      isNewdisabled: true,\n      isPlayDisabled: false,\n    });\n  }\n\n  handlePlayClick = () => {\n    let winner = func.getWinner(this.state.playerOne, this.state.playerTwo, this.state.winningAttribute);\n    let playerOneWins = this.state.playerOneWins;\n    let playerTwoWins = this.state.playerTwoWins;\n    if (winner === 'Player One Wins') {\n      playerOneWins++;\n    } else if(winner === 'Player Two Wins') {\n      playerTwoWins++;\n    } else {\n      winner = ('The result is draw.');\n    }\n    this.setState({\n      playerOneWins,\n      playerTwoWins,\n      isPlayerTwoDisabled: true,\n      isNewdisabled: false,\n      isPlayDisabled: true\n     });\n    alert(winner);\n  }\n\n  async componentDidMount() {\n    const people = await func.fetchData('people');\n    const starships = await func.fetchData('starships');\n    const collections = { people, starships };\n    this.setState({ collections });\n  }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <div style={{textAlign: 'center'}}>\n        <div style={{marginTop: 20}}>\n          <TypeSelect\n            type={this.state.type}\n            handleChange={this.handleTypeSelectChange}\n          />\n\n          <CommonWinningAttribute\n            type={this.state.type}\n            winningAttribute={this.state.winningAttribute}\n            handleChange={this.handleCommonAttributeSelectChange}\n          />\n        </div>\n\n        <div>\n          <Player isDisplayed={true}\n            title='Player One'\n            type={this.state.type}\n            details={this.state.playerOne}\n            winningAttribute={this.state.winningAttribute}\n          />\n          <Player isDisplayed={this.state.isPlayerTwoDisabled}\n            title='Player Two'\n            type={this.state.type}\n            details={this.state.playerTwo}\n            winningAttribute={this.state.winningAttribute}\n          />\n        </div>\n        <Typography>\n          Winning Score: <b>{this.state.playerOneWins}</b> vs <b>{this.state.playerTwoWins}</b>\n        </Typography>\n        <div className={classes.buttonContainer}>\n          <Button\n            disabled={(this.state.type === '') || this.state.isNewdisabled}\n            className={classes.button}\n            onClick={this.handleNewClick}\n          >\n            NEW\n          </Button>\n\n          <Button\n            disabled={(this.state.winningAttribute === '') || this.state.isPlayDisabled}\n            className={classes.button}\n            onClick={this.handlePlayClick}\n          >\n            PLAY\n          </Button>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}